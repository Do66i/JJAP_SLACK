{"version":3,"file":"13.js","mappings":"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","sources":["webpack://alecture/./components/ChatBox/styles.tsx","webpack://alecture/./components/ChatBox/index.tsx","webpack://alecture/./components/Chat/styles.tsx","webpack://alecture/./components/Chat/index.tsx","webpack://alecture/./components/ChatList/styles.tsx","webpack://alecture/./components/ChatList/index.tsx","webpack://alecture/./utils/makeSection.ts"],"sourcesContent":["import styled from '@emotion/styled';\nimport { MentionsInput } from 'react-mentions';\n\nexport const ChatArea = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 20px;\n  padding-top: 0;\n`;\n\nexport const Form = styled.form`\n  color: rgb(29, 28, 29);\n  font-size: 15px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid rgb(29, 28, 29);\n`;\n\nexport const MentionsTextarea = styled(MentionsInput)`\n  font-family: Slack-Lato, appleLogo, sans-serif;\n  font-size: 15px;\n  padding: 8px 9px;\n  width: 100%;\n  & strong {\n    // nested selector\n    background: skyblue;\n  }\n  & textarea {\n    height: 44px;\n    padding: 9px 10px !important;\n    outline: none !important;\n    border-radius: 4px !important;\n    resize: none !important;\n    line-height: 22px;\n    border: none;\n  }\n  & ul {\n    border: 1px solid lightgray;\n    max-height: 200px;\n    overflow-y: auto;\n    padding: 9px 10px;\n    background: white;\n    border-radius: 4px;\n    width: 150px;\n  }\n`;\n\nexport const Toolbox = styled.div`\n  position: relative;\n  background: rgb(248, 248, 248);\n  height: 41px;\n  display: flex;\n  border-top: 1px solid rgb(221, 221, 221);\n  align-items: center;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n`;\n\nexport const SendButton = styled.button`\n  position: absolute;\n  right: 5px;\n  top: 5px;\n`;\n\nexport const EachMention = styled.button<{ focus: boolean }>`\n  padding: 4px 20px;\n  background: transparent;\n  border: none;\n  display: flex;\n  align-items: center;\n  color: rgb(28, 29, 28);\n  width: 100%;\n  & img {\n    margin-right: 5px;\n  }\n  ${({ focus }) =>\n    focus &&\n    `\n    background: #1264a3;\n    color: white;\n  `};\n`;\n","import React, { useCallback, useEffect, useRef, VFC } from 'react';\nimport { ChatArea, EachMention, Form, MentionsTextarea, SendButton, Toolbox } from './styles';\nimport autosize from 'autosize';\nimport { Mention, SuggestionDataItem } from 'react-mentions';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport { useParams } from 'react-router';\nimport useSWR from 'swr';\nimport gravatar from 'gravatar';\n\ninterface Props {\n  chat: string;\n  onSubmitForm: (e: any) => void;\n  onChangeChat: (e: any) => void;\n  placeholder?: string;\n}\n\nconst ChatBox: VFC<Props> = ({ chat, onSubmitForm, onChangeChat, placeholder }) => {\n  const { workspace } = useParams<{ workspace: string }>();\n  const {\n    data: userData,\n    error,\n    mutate,\n  } = useSWR<IUser | false>('/api/users', fetcher, {\n    dedupingInterval: 2000,\n  });\n  const { data: memberData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/members` : null, fetcher);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  useEffect(() => {\n    if (textareaRef.current) {\n      autosize(textareaRef.current);\n    }\n  }, []);\n\n  const onkeydownChat = useCallback(\n    (e: any) => {\n      if (e.key === 'Enter') {\n        if (!e.shiftKey) {\n          e.preventDefault();\n          onSubmitForm(e);\n        }\n      }\n    },\n    [onSubmitForm],\n  );\n\n  const renderSuggestion: (\n    suggestion: SuggestionDataItem,\n    search: string,\n    highlightedDisplay: React.ReactNode,\n    index: number,\n    focused: boolean,\n  ) => React.ReactNode = useCallback(\n    (member, search, highlightedDisplay, index, focus) => {\n      if (!memberData) {\n        return null;\n      }\n      return (\n        <EachMention focus={focus}>\n          <img\n            src={gravatar.url(memberData[index].email, { s: '20px', d: 'retro' })}\n            alt={memberData[index].nickname}\n          />\n          <span>{highlightedDisplay}</span>\n        </EachMention>\n      );\n    },\n    [memberData],\n  );\n\n  return (\n    <ChatArea>\n      <Form onSubmit={onSubmitForm}>\n        <MentionsTextarea\n          id=\"editor-chat\"\n          value={chat}\n          onChange={onChangeChat}\n          onKeyDown={onkeydownChat}\n          placeholder={placeholder}\n          inputRef={textareaRef}\n          allowSuggestionsAboveCursor\n        >\n          <Mention\n            appendSpaceOnAdd\n            trigger=\"@\"\n            data={memberData?.map((v) => ({ id: v.id, display: v.nickname })) || []}\n            renderSuggestion={renderSuggestion}\n          />\n        </MentionsTextarea>\n        <Toolbox>\n          <SendButton\n            className={\n              'c-button-unstyled c-icon_button c-icon_button--light c-icon_button--size_medium c-texty_input__button c-texty_input__button--send' +\n              (chat?.trim() ? '' : ' c-texty_input__button--disabled')\n            }\n            data-qa=\"texty_send_button\"\n            aria-label=\"Send message\"\n            data-sk=\"tooltip_parent\"\n            type=\"submit\"\n            disabled={!chat?.trim()}\n          >\n            <i className=\"c-icon c-icon--paperplane-filled\" aria-hidden=\"true\" />\n          </SendButton>\n        </Toolbox>\n      </Form>\n    </ChatArea>\n  );\n};\n\nexport default ChatBox;\n","import styled from '@emotion/styled';\n\nexport const ChatWrapper = styled.div`\n  display: flex;\n  padding: 8px 20px;\n\n  &:hover {\n    background: #eee;\n  }\n\n  & .chat-img {\n    display: flex;\n    width: 36px;\n    margin-right: 8px;\n\n    & img {\n      width: 36px;\n      height: 36px;\n    }\n  }\n\n  & .chat-text {\n    display: flex;\n    flex-wrap: wrap;\n    flex: 1;\n\n    & p {\n      flex: 0 0 100%;\n      margin: 0;\n    }\n  }\n\n  & .chat-user {\n    display: flex;\n    flex: 0 0 100%;\n    align-items: center;\n\n    & > b {\n      margin-right: 5px;\n    }\n\n    & > span {\n      font-size: 12px;\n    }\n  }\n\n  & a {\n    text-decoration: none;\n    color: deepskyblue;\n  }\n`;\n","import { IChat, IDM } from '@typings/db';\nimport React, { VFC, memo, useMemo } from 'react';\nimport { ChatWrapper } from './styles';\nimport gravarta from 'gravatar';\nimport dayjs from 'dayjs';\nimport regexifyString from 'regexify-string';\nimport { Link, useParams } from 'react-router-dom';\nimport Workspace from '@layouts/Workspace';\n\ninterface Props {\n  data: IDM | IChat;\n}\n\n//@[궉도토](7)\n// \\d 숫자 +는 1개 이상 ?는 0개나 1개, *는 0개 이상\n// g는 모두찾기\n// |는 or \\n 줄바꿈\nconst Chat: VFC<Props> = ({ data }) => {\n  const { workspace } = useParams<{ workspace: string }>();\n  const user = 'Sender' in data ? data.Sender : data.User;\n  const result = useMemo(\n    () =>\n      regexifyString({\n        input: data?.content,\n        pattern: /@\\[(.+?)\\]\\((\\d+?)\\)|\\n/g,\n        decorator(match, index) {\n          const arr: string[] | null = match.match(/@\\[(.+?)]\\((\\d+?)\\)/)!;\n          if (arr) {\n            return (\n              <Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\n                @{arr[1]}\n              </Link>\n            );\n          }\n          return <br key={index} />;\n        },\n      }),\n    [data.content],\n  );\n\n  return (\n    <ChatWrapper>\n      <div className=\"chat-img\">\n        <img src={gravarta.url(user?.email, { s: '36px', d: 'retro' })} alt={user?.nickname} />\n      </div>\n      <div className=\"chat-text\">\n        <div className=\"chat-user\">\n          <b>{user?.nickname}</b>\n          <span>{dayjs(data?.createdAt).format('h:mm A')}</span>\n        </div>\n        <p>{result}</p>\n      </div>\n    </ChatWrapper>\n  );\n};\n\nexport default memo(Chat);\n","import styled from '@emotion/styled';\n\nexport const ChatZone = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`;\n\nexport const Section = styled.section`\n  margin-top: 20px;\n  border-top: 1px solid #eee;\n`;\n\nexport const StickyHeader = styled.div`\n  justify-content: center;\n  flex: 1;\n  width: 100%;\n  position: sticky;\n  top: 14px;\n  & button {\n    font-weight: bold;\n    font-size: 13px;\n    height: 28px;\n    line-height: 27px;\n    padding: 0 16px;\n    z-index: 2;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 24px;\n    position: relative;\n    top: -13px;\n    background: white;\n    border: none;\n    outline: none;\n  }\n`;\n","import Chat from '@components/Chat';\nimport { IChat, IDM } from '@typings/db';\nimport React, { useCallback, VFC, RefObject } from 'react';\nimport { ChatZone, Section, StickyHeader } from './styles';\nimport { Scrollbars } from 'react-custom-scrollbars';\n\ninterface Props {\n  scrollRef: RefObject<Scrollbars>;\n  chatSections: { [key: string]: (IDM | IChat)[] };\n  setSize: (f: (size: number) => number) => Promise<(IDM | IChat)[][] | undefined>;\n  isReachingEnd?: boolean;\n}\n\nconst ChatList: VFC<Props> = ({ chatSections, setSize, isReachingEnd, scrollRef }) => {\n  const onScroll = useCallback((values: any) => {\n    if (values.scrollTop === 0 && !isReachingEnd) {\n      setSize((prevSize) => prevSize + 1).then(() => {\n        if (scrollRef?.current) {\n          scrollRef.current?.scrollTop(scrollRef.current?.getScrollHeight() - values.scrollHeight);\n        }\n      });\n    }\n  }, []); //스크롤시 채팅들 생기게하려고 (데이터 추가 로딩)\n  return (\n    <ChatZone>\n      <Scrollbars autoHide ref={scrollRef} onScrollFrame={onScroll}>\n        {Object.entries(chatSections).map(([date, chats]) => {\n          return (\n            <Section className={`section-${date}`} key={date}>\n              <StickyHeader>\n                {chats.map((chat) => (\n                  <Chat key={chat.id} data={chat} />\n                ))}\n              </StickyHeader>\n            </Section>\n          );\n        })}\n      </Scrollbars>\n    </ChatZone>\n  );\n};\n\nexport default ChatList;\n","import { IChat, IDM } from '@typings/db';\nimport dayjs from 'dayjs';\n\nexport default function makeSection<T extends IDM | IChat>(chatList: T[]) {\n  const sections: { [key: string]: T[] } = {};\n  chatList.forEach((chat) => {\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\n    if (Array.isArray(sections[monthDate])) {\n      sections[monthDate].push(chat);\n    } else {\n      sections[monthDate] = [chat];\n    }\n  });\n  return sections;\n}\n"],"names":["ChatArea","Form","MentionsTextarea","MentionsInput","Toolbox","SendButton","EachMention","focus","chat","onSubmitForm","onChangeChat","placeholder","workspace","useParams","useSWR","fetcher","dedupingInterval","userData","data","memberData","error","mutate","textareaRef","useRef","useEffect","current","autosize","onkeydownChat","useCallback","e","key","shiftKey","preventDefault","renderSuggestion","member","search","highlightedDisplay","index","src","gravatar","email","s","d","alt","nickname","onSubmit","id","value","onChange","onKeyDown","inputRef","allowSuggestionsAboveCursor","appendSpaceOnAdd","trigger","map","v","display","className","trim","type","disabled","ChatWrapper","Chat","user","Sender","User","result","useMemo","regexifyString","input","content","pattern","decorator","match","arr","to","gravarta","dayjs","createdAt","format","memo","ChatZone","Section","StickyHeader","chatSections","setSize","isReachingEnd","scrollRef","onScroll","values","scrollTop","prevSize","then","getScrollHeight","scrollHeight","autoHide","ref","onScrollFrame","Object","entries","date","chats","makeSection","chatList","sections","forEach","monthDate","Array","isArray","push"],"sourceRoot":""}