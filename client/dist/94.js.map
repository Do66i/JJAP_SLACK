{"version":3,"file":"94.js","mappings":"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","sources":["webpack://alecture/./pages/DirectMessage/styles.tsx","webpack://alecture/./pages/DirectMessage/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n  & img {\n    margin-right: 5px;\n  }\n`;\n\nexport const DragOver = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`;\n","// import React, { useCallback, useEffect, useRef } from 'react';\n// import { Scrollbars } from 'react-custom-scrollbars';\n// import { Container, Header } from './styles';\n// import gravatar from 'gravatar';\n// import useSWR from 'swr';\n// import useSWRInfinite from 'swr/infinite';\n// import fetcher from '@utils/fetcher';\n// import { useParams } from 'react-router';\n// import { IDM, IUser } from '@typings/db';\n// import ChatBox from '@components/ChatBox';\n// import ChatList from '@components/ChatList';\n// import useInput from '@hooks/useInput';\n// import axios from 'axios';\n// import makeSection from '@utils/makeSection';\n// import useSocket from '@hooks/useSocket';\n\n// const PAGE_SIZE = 20;\n// const DirectMessage = () => {\n//   const { workspace, id } = useParams<{ workspace: string; id: string }>();\n//   const { data: userData } = useSWR<IUser>(`/api/workspaces/${workspace}/users/${id}`, fetcher);\n//   const { data: myData } = useSWR<IUser>('/api/users', fetcher);\n//   const {\n//     data: chatData,\n//     mutate: mutateChat,\n//     setSize,\n//   } = useSWRInfinite<IDM[]>(\n//     (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=${PAGE_SIZE}&page=${index + 1}`,\n//     fetcher,\n//   ); //채팅받아오는 API\n//   const scrollbarRef = useRef<Scrollbars>(null);\n//   const [chat, onChangeChat, setChat] = useInput('');\n//   const [socket] = useSocket(workspace);\n//   const isEmpty = chatData?.[0]?.length === 0;\n//   const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < PAGE_SIZE) || false;\n\n//   const onSubmitForm = useCallback(\n//     (e: any) => {\n//       e.preventDefault();\n//       if (chat?.trim() && chatData) {\n//         const savedChat = chat;\n//         mutateChat((prevChatData) => {\n//           prevChatData?.[0].unshift({\n//             id: (chatData[0][0]?.id || 0) + 1,\n//             content: savedChat,\n//             SenderId: myData!.id,\n//             Sender: myData!,\n//             ReceiverId: userData!.id,\n//             Receiver: userData!,\n//             createdAt: new Date(),\n//           });\n//           return prevChatData;\n//         }, false).then(() => {\n//           localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n//           setChat('');\n//           if (scrollbarRef.current) {\n//             // console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n//             scrollbarRef.current.scrollToBottom();\n//           }\n//         });\n//         axios\n//           .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\n//             content: chat,\n//           })\n//           .catch(console.error);\n//       }\n//     },\n//     [chat, workspace, id, myData, userData, chatData, mutateChat, setChat],\n//   );\n\n//   const onMessage = useCallback((data: IDM) => {\n//     // id는 상대방 아이디\n//     if (data?.SenderId === Number(id) && myData?.id !== Number(id)) {\n//       mutateChat((chatData) => {\n//         chatData?.[0].unshift(data);\n//         return chatData;\n//       }, false).then(() => {\n//         if (scrollbarRef.current) {\n//           if (\n//             scrollbarRef.current.getScrollHeight() <\n//             scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n//           ) {\n//             // console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n//             setTimeout(() => {\n//               scrollbarRef.current?.scrollToBottom();\n//             }, 50);\n//           }\n//         }\n//       });\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     socket?.on('dm', onMessage);\n//     return () => {\n//       socket?.off('dm', onMessage);\n//     };\n//   }, [socket, onMessage]);\n\n//   useEffect(() => {\n//     if (chatData?.length === 1) {\n//       scrollbarRef.current?.scrollToBottom();\n//     }\n//   }, [chatData]);\n\n//   if (!userData || !myData) {\n//     return null;\n//   }\n\n//   const chatSections = makeSection(chatData ? ([] as IDM[]).concat(...chatData).reverse() : []);\n\n//   return (\n//     <Container>\n//       <Header>\n//         <img src={gravatar.url(userData?.email, { s: '24px', d: 'retro' })} alt={userData?.toString()} />\n//         <span>{userData?.nickname}</span>\n//       </Header>\n//       <ChatList chatSections={chatSections} scrollRef={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\n//       <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n//     </Container>\n//   );\n// };\n\n// export default DirectMessage;\n\nimport ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport useInput from '@hooks/useInput';\nimport useSocket from '@hooks/useSocket';\nimport { DragOver } from '@pages/Channel/styles';\nimport { Header, Container } from '@pages/DirectMessage/styles';\nimport { IDM, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport makeSection from '@utils/makeSection';\nimport axios from 'axios';\nimport gravatar from 'gravatar';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\nimport useSWRInfinite from 'swr/infinite';\n\nconst PAGE_SIZE = 20;\nconst DirectMessage = () => {\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\n  const [socket] = useSocket(workspace);\n  const { data: myData } = useSWR<IUser>('/api/users', fetcher);\n  const { data: userData } = useSWR<IUser>(`/api/workspaces/${workspace}/users/${id}`, fetcher);\n  const {\n    data: chatData,\n    mutate: mutateChat,\n    setSize,\n  } = useSWRInfinite<IDM[]>(\n    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=${PAGE_SIZE}&page=${index + 1}`,\n    fetcher,\n    {\n      onSuccess(data) {\n        if (data?.length === 1) {\n          setTimeout(() => {\n            scrollbarRef.current?.scrollToBottom();\n          }, 100);\n        }\n      },\n    },\n  );\n  const [chat, onChangeChat, setChat] = useInput('');\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const [dragOver, setDragOver] = useState(false);\n\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < PAGE_SIZE);\n\n  const onSubmitForm = useCallback(\n    (e: any) => {\n      e.preventDefault();\n      if (chat?.trim() && chatData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            SenderId: myData!.id,\n            Sender: myData!,\n            ReceiverId: userData!.id,\n            Receiver: userData!,\n            createdAt: new Date(),\n          });\n          return prevChatData;\n        }, false).then(() => {\n          localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n          setChat('');\n          if (scrollbarRef.current) {\n            // console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n            scrollbarRef.current.scrollToBottom();\n          }\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\n            content: chat,\n          })\n          .catch(console.error);\n      }\n    },\n    [chat, workspace, id, myData, userData, chatData, mutateChat, setChat],\n  );\n\n  const onMessage = useCallback(\n    (data: IDM) => {\n      if (data.SenderId === Number(id) && myData?.id !== Number(id)) {\n        mutateChat((chatData) => {\n          chatData?.[0].unshift(data);\n          return chatData;\n        }, false).then(() => {\n          if (scrollbarRef.current) {\n            if (\n              scrollbarRef.current.getScrollHeight() <\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n            ) {\n              // console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n              setTimeout(() => {\n                scrollbarRef.current?.scrollToBottom();\n              }, 100);\n            } else {\n              toast.success('새 메시지가 도착했습니다.', {\n                onClick() {\n                  scrollbarRef.current?.scrollToBottom();\n                },\n                closeOnClick: true,\n              });\n            }\n          }\n        });\n      }\n    },\n    [id, myData, mutateChat],\n  );\n\n  useEffect(() => {\n    socket?.on('dm', onMessage);\n    return () => {\n      socket?.off('dm', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  useEffect(() => {\n    localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n  }, [workspace, id]);\n\n  const onDrop = useCallback(\n    (e: any) => {\n      e.preventDefault();\n      // console.log(e);\n      const formData = new FormData();\n      if (e.dataTransfer.items) {\n        // Use DataTransferItemList interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\n          // If dropped items aren't files, reject them\n          if (e.dataTransfer.items[i].kind === 'file') {\n            const file = e.dataTransfer.items[i].getAsFile();\n            // console.log('... file[' + i + '].name = ' + file.name);\n            formData.append('image', file);\n          }\n        }\n      } else {\n        // Use DataTransfer interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\n          // console.log('... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\n          formData.append('image', e.dataTransfer.files[i]);\n        }\n      }\n      axios.post(`/api/workspaces/${workspace}/dms/${id}/images`, formData).then(() => {\n        setDragOver(false);\n        localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n        mutateChat();\n      });\n    },\n    [workspace, id, mutateChat],\n  );\n\n  const onDragOver = useCallback((e: any) => {\n    e.preventDefault();\n    // console.log(e);\n    setDragOver(true);\n  }, []);\n\n  if (!userData || !myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? ([] as IDM[]).concat(...chatData).reverse() : []);\n\n  return (\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\n      <Header>\n        <img src={gravatar.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\n        <span>{userData.nickname}</span>\n      </Header>\n      <ChatList scrollRef={scrollbarRef} isReachingEnd={isReachingEnd} chatSections={chatSections} setSize={setSize} />\n      <ChatBox\n        onSubmitForm={onSubmitForm}\n        chat={chat}\n        onChangeChat={onChangeChat}\n        placeholder={`Message ${userData.nickname}`}\n      />\n      {dragOver && <DragOver>업로드!</DragOver>}\n    </Container>\n  );\n};\n\nexport default DirectMessage;\n"],"names":["Container","Header","useParams","workspace","id","socket","useSocket","myData","useSWR","fetcher","data","userData","useSWRInfinite","index","onSuccess","length","setTimeout","scrollbarRef","current","scrollToBottom","chatData","mutateChat","mutate","setSize","useInput","chat","onChangeChat","setChat","useRef","useState","dragOver","setDragOver","isReachingEnd","onSubmitForm","useCallback","e","preventDefault","trim","savedChat","prevChatData","unshift","content","SenderId","Sender","ReceiverId","Receiver","createdAt","Date","then","localStorage","setItem","getTime","toString","axios","catch","console","error","onMessage","Number","getScrollHeight","getClientHeight","getScrollTop","toast","onClick","closeOnClick","useEffect","on","off","onDrop","formData","FormData","dataTransfer","items","i","kind","file","getAsFile","append","files","onDragOver","chatSections","makeSection","concat","reverse","src","gravatar","email","s","d","alt","nickname","ChatList","scrollRef","ChatBox","placeholder"],"sourceRoot":""}