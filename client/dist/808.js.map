{"version":3,"file":"808.js","mappings":"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","sources":["webpack://alecture/./pages/Channel/index.tsx"],"sourcesContent":["import ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport InviteChannelModal from '@components/InviteChannelModal';\nimport useInput from '@hooks/useInput';\nimport useSocket from '@hooks/useSocket';\nimport { Container, Header, DragOver } from '@pages/Channel/styles';\nimport { IChannel, IChat, IDM, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport makeSection from '@utils/makeSection';\nimport axios from 'axios';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport { useParams } from 'react-router';\nimport useSWR from 'swr';\nimport useSWRInfinite from 'swr/infinite';\n\nconst Channel = () => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const { data: myData } = useSWR<IUser>('/api/users', fetcher);\n  const [chat, onChangeChat, setChat] = useInput('');\n  const { data: channelData } = useSWR<IChannel>(`/api/workspaces/${workspace}/channels/${channel}`, fetcher);\n  const {\n    data: chatData,\n    mutate: mutateChat,\n    setSize,\n  } = useSWRInfinite<IChat[]>(\n    (index) => `/api/workspaces/${workspace}/channels/${channel}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n  );\n  const { data: channelMembersData } = useSWR<IUser[]>(\n    myData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n  const [socket] = useSocket(workspace);\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n  const [dragOver, setDragOver] = useState(false);\n\n  // 0초 A: 안녕~(optimistic UI)\n  // 1초 B: 안녕~\n  // 2초 A: 안녕~(실제 서버)\n\n  const onSubmitForm = useCallback(\n    (e: any) => {\n      e.preventDefault();\n      if (chat?.trim() && chatData && channelData && myData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            UserId: myData.id,\n            User: myData,\n            ChannelId: channelData.id,\n            Channel: channelData,\n            createdAt: new Date(),\n          });\n          return prevChatData;\n        }, false).then(() => {\n          setChat('');\n          scrollbarRef.current?.scrollToBottom();\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/channels/${channel}/chats`, {\n            content: savedChat,\n          })\n          .then(() => {\n            mutateChat();\n          })\n          .catch(console.error);\n      }\n    },\n    [chat, workspace, channel, channelData, myData, chatData, mutateChat, setChat],\n  );\n\n  const onMessage = useCallback(\n    (data: IChat) => {\n      // id는 상대방 아이디\n      if (data.Channel.name === channel && (data.content.startsWith('uploads\\\\') || data.UserId !== myData?.id)) {\n        mutateChat((chatData) => {\n          chatData?.[0].unshift(data);\n          return chatData;\n        }, false).then(() => {\n          if (scrollbarRef.current) {\n            if (\n              scrollbarRef.current.getScrollHeight() <\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n            ) {\n              // console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n              setTimeout(() => {\n                scrollbarRef.current?.scrollToBottom();\n              }, 50);\n            }\n          }\n        });\n      }\n    },\n    [channel, myData],\n  );\n\n  useEffect(() => {\n    socket?.on('message', onMessage);\n    return () => {\n      socket?.off('message', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  // 로딩 시 스크롤바 제일 아래로\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      // console.log('toBottomWhenLoaded', scrollbarRef.current);\n      setTimeout(() => {\n        // console.log('scrollbar', scrollbarRef.current);\n        scrollbarRef.current?.scrollToBottom();\n      }, 500);\n    }\n  }, [chatData]);\n\n  const onClickInviteChannel = useCallback(() => {\n    setShowInviteChannelModal(true);\n  }, []);\n\n  const onCloseModal = useCallback(() => {\n    setShowInviteChannelModal(false);\n  }, []);\n\n  const onChangeFile = useCallback((e: any) => {\n    const formData = new FormData();\n    if (e.target.files) {\n      // Use DataTransferItemList interface to access the file(s)\n      for (let i = 0; i < e.target.files.length; i++) {\n        const file = e.target.files[i].getAsFile();\n        // console.log('... file[' + i + '].name = ' + file.name);\n        formData.append('image', file);\n      }\n    }\n    axios.post(`/api/workspaces/${workspace}/channels/${channel}/images`, formData).then(() => {});\n  }, []);\n\n  const onDrop = useCallback(\n    (e: any) => {\n      e.preventDefault();\n      const formData = new FormData();\n      if (e.dataTransfer.items) {\n        // Use DataTransferItemList interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\n          // If dropped items aren't files, reject them\n          if (e.dataTransfer.items[i].kind === 'file') {\n            const file = e.dataTransfer.items[i].getAsFile();\n            // console.log(e, '.... file[' + i + '].name = ' + file.name);\n            formData.append('image', file);\n          }\n        }\n      } else {\n        // Use DataTransfer interface to access the file(s)\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\n          // console.log(e, '... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\n          formData.append('image', e.dataTransfer.files[i]);\n        }\n      }\n      axios.post(`/api/workspaces/${workspace}/channels/${channel}/images`, formData).then(() => {\n        setDragOver(false);\n      });\n    },\n    [workspace, channel],\n  );\n\n  const onDragOver = useCallback((e: any) => {\n    e.preventDefault();\n    console.log(e);\n    setDragOver(true);\n  }, []);\n\n  if (!myData || !myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\n\n  return (\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\n      <Header>\n        <span>#{channel}</span>\n        <div className=\"header-right\">\n          <span>{channelMembersData?.length}</span>\n          <button\n            onClick={onClickInviteChannel}\n            className=\"c-button-unstyled p-ia__view_header__button\"\n            aria-label=\"Add people to #react-native\"\n            data-sk=\"tooltip_parent\"\n            type=\"button\"\n          >\n            <i className=\"c-icon p-ia__view_header__button_icon c-icon--add-user\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      </Header>\n      <ChatList chatSections={chatSections} scrollRef={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n      {dragOver && <DragOver>업로드!</DragOver>}\n    </Container>\n  );\n};\n\nexport default Channel;\n"],"names":["useParams","workspace","channel","myData","useSWR","fetcher","data","useInput","chat","onChangeChat","setChat","channelData","useSWRInfinite","index","chatData","mutateChat","mutate","setSize","channelMembersData","socket","useSocket","isReachingEnd","length","scrollbarRef","useRef","useState","showInviteChannelModal","setShowInviteChannelModal","dragOver","setDragOver","onSubmitForm","useCallback","e","preventDefault","trim","savedChat","prevChatData","unshift","id","content","UserId","User","ChannelId","Channel","createdAt","Date","then","current","scrollToBottom","axios","catch","console","error","onMessage","name","startsWith","getScrollHeight","getClientHeight","getScrollTop","setTimeout","useEffect","on","off","onClickInviteChannel","onCloseModal","onDrop","formData","FormData","target","files","i","file","getAsFile","append","dataTransfer","items","kind","onDragOver","log","chatSections","makeSection","flat","reverse","className","onClick","type","scrollRef","show"],"sourceRoot":""}