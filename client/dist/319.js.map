{"version":3,"file":"319.js","mappings":"2oCAsIA,UA9He,WACb,OAAgCA,EAAAA,EAAAA,IAAO,aAAcC,EAAAA,GAA7CC,EAAR,EAAQA,KAER,GAFA,EAAcC,MAAd,EAAqBC,OAErB,GAA+BC,EAAAA,EAAAA,GAAS,IAAxC,IAAOC,EAAP,KAAcC,EAAd,KACA,KAAqCF,EAAAA,EAAAA,GAAS,IAA9C,GAAOG,EAAP,KAAiBC,EAAjB,KACA,KAAkCJ,EAAAA,EAAAA,GAAS,IAA3C,GAAOK,EAAP,KAAmBC,EAAnB,KACA,KAA4CN,EAAAA,EAAAA,GAAS,IAArD,GAAOO,EAAP,KAAwBC,EAAxB,KACA,KAA4CC,EAAAA,EAAAA,WAAS,GAArD,GAAOC,EAAP,KAAuBC,EAAvB,KACA,KAAsCF,EAAAA,EAAAA,UAAS,IAA/C,GAAOG,EAAP,KAAoBC,EAApB,KACA,KAA0CJ,EAAAA,EAAAA,WAAS,GAAnD,GAAOK,EAAP,KAAsBC,EAAtB,KAEMC,GAAWC,EAAAA,EAAAA,UAEXC,GAAmBC,EAAAA,EAAAA,cACvB,SAACC,GACCd,EAAYc,EAAEC,OAAOC,OACrBX,EAAkBS,EAAEC,OAAOC,QAAUf,KAEvC,CAACA,IAGGgB,GAAwBJ,EAAAA,EAAAA,cAC5B,SAACC,GACCZ,EAAiBY,EAAEC,OAAOC,OAC1BX,EAAkBS,EAAEC,OAAOC,QAAUjB,KAEvC,CAACA,IAGGmB,GAAWL,EAAAA,EAAAA,cACf,SAACC,GACC,GAAInB,EAAMwB,OAAS,EAGjB,OAFAL,EAAEM,sBACFV,EAASW,QAAQC,QAGjBR,EAAEM,iBAEFb,EAAe,IACfE,GAAiB,GACZL,GACHmB,IAAAA,KACQ,aAAc,CAAE5B,MAAAA,EAAOE,SAAAA,EAAUE,SAAAA,IACtCyB,MAAK,SAACC,GAELhB,GAAiB,MAElBiB,OAAM,SAACC,GACNC,QAAQC,IAAI,OAAQF,EAAIF,UACxBlB,EAAeoB,EAAIF,SAASlC,SAE7BuC,SAAQ,iBAMjB,CAACnC,EAAOE,EAAUE,EAAUE,EAAeG,IAG7C,QAAa2B,IAATxC,EACF,OAAO,uCAGT,IAAMyC,GAAWC,EAAAA,EAAAA,MAUjB,OATAC,EAAAA,EAAAA,YAAU,WACJ3C,GACFyC,EAAS,kCAKV,CAACzC,IAGF,uBAAK4C,GAAG,aACN,gBAAC,KAAD,mBACA,gBAAC,KAAD,CAAMjB,SAAUA,GACd,gBAAC,KAAD,CAAOiB,GAAG,eACR,sCACA,2BACE,gBAAC,KAAD,CAAOC,aAAa,QAAQC,KAAK,QAAQF,GAAG,QAAQnB,MAAOrB,EAAO2C,SAAU1C,EAAe2C,IAAK7B,MAIpG,gBAAC,KAAD,CAAOyB,GAAG,kBACR,kCACA,2BACE,gBAAC,KAAD,CAAOC,aAAa,QAAQC,KAAK,OAAOF,GAAG,WAAWnB,MAAOnB,EAAUyC,SAAUxC,MAIrF,gBAAC,KAAD,CAAOqC,GAAG,kBACR,oCACA,2BACE,gBAAC,KAAD,CAAOC,aAAa,QAAQC,KAAK,WAAWF,GAAG,WAAWnB,MAAOjB,EAAUuC,SAAU1B,MAIzF,gBAAC,KAAD,CAAOuB,GAAG,wBACR,uCACA,2BACE,gBAAC,KAAD,CACEC,aAAa,QACbC,KAAK,WACLF,GAAG,iBACHnB,MAAOf,EACPqC,SAAUrB,KAIbb,GAAkB,gBAAC,KAAD,yBACjBP,GAAY,gBAAC,KAAD,oBACbS,GAAe,gBAAC,KAAD,KAAQA,GACvBE,GAAiB,gBAAC,KAAD,0BAEpB,gBAAC,KAAD,CAAQ6B,KAAK,UAAb,SAEF,gBAAC,KAAD,wBAEE,gBAAC,KAAD,CAAMG,GAAG,UAAT","sources":["webpack://alecture/./pages/SignUp/index.tsx"],"sourcesContent":["import React, { useCallback, useState, useRef, useEffect } from 'react';\nimport { Success, Form, Error, Label, Input, LinkContainer, Button, Header } from './styles';\nimport axios from 'axios';\nimport { Link, useNavigate } from 'react-router-dom';\nimport useInput from '@hooks/useInput';\nimport useSWR from 'swr';\nimport fetcher from '@utils/fetcher';\n\nconst SignUp = () => {\n  const { data, error, mutate } = useSWR('/api/users', fetcher);\n\n  const [email, onChangeEmail] = useInput('');\n  const [nickname, onChangeNickname] = useInput('');\n  const [password, , setPassword] = useInput('');\n  const [passwordCheck, , setPasswordCheck] = useInput('');\n  const [missmatchError, setMissmatchError] = useState(false);\n  const [signUpError, setSignupError] = useState('');\n  const [signUpSuccess, setSignupSuccess] = useState(false);\n\n  const Inputref = useRef() as React.MutableRefObject<HTMLInputElement>;\n\n  const onChangePassword = useCallback(\n    (e: any) => {\n      setPassword(e.target.value);\n      setMissmatchError(e.target.value !== passwordCheck);\n    },\n    [passwordCheck], //함수 바깥에서 선언한 친구는 써도됨 (변하지 않는 값은 쓰지않아도됨 ex> setPassword)\n  );\n\n  const onChangePasswordCheck = useCallback(\n    (e: any) => {\n      setPasswordCheck(e.target.value);\n      setMissmatchError(e.target.value !== password);\n    },\n    [password],\n  );\n\n  const onSubmit = useCallback(\n    (e: React.FormEvent) => {\n      if (email.length < 1) {\n        e.preventDefault();\n        Inputref.current.focus();\n        return;\n      } else {\n        e.preventDefault();\n        // console.log('------------------로그인 확인', email, nickname, password, passwordCheck);\n        setSignupError('');\n        setSignupSuccess(false);\n        if (!missmatchError) {\n          axios\n            .post('/api/users', { email, nickname, password })\n            .then((response) => {\n              // console.log('에러따위 없소 ! 서버로 회원가입가기 전송 !', response);\n              setSignupSuccess(true);\n            })\n            .catch((err) => {\n              console.log('루저 ㅋ', err.response);\n              setSignupError(err.response.data);\n            })\n            .finally(() => {\n              // console.log('finally는 try, catch문에서도 사용가능');\n            });\n        }\n      }\n    },\n    [email, nickname, password, passwordCheck, missmatchError],\n  );\n\n  if (data === undefined) {\n    return <div>로딩중임 기둘기</div>;\n  }\n\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (data) {\n      navigate('/workspace/sleact/channel/일반');\n      return;\n    }\n    // 로그인전일때 data=false(api문서 참고)니까 실행안되고 패스됨\n    //로그인되면 if문에서 걸림 리턴값나옴\n  }, [data]);\n\n  return (\n    <div id=\"container\">\n      <Header>JJAP SLACK</Header>\n      <Form onSubmit={onSubmit}>\n        <Label id=\"email-label\">\n          <span>이메일 주소</span>\n          <div>\n            <Input autoComplete=\"false\" type=\"email\" id=\"email\" value={email} onChange={onChangeEmail} ref={Inputref} />\n          </div>\n        </Label>\n\n        <Label id=\"nickname-label\">\n          <span>별명</span>\n          <div>\n            <Input autoComplete=\"false\" type=\"text\" id=\"nickname\" value={nickname} onChange={onChangeNickname} />\n          </div>\n        </Label>\n\n        <Label id=\"password-label\">\n          <span>비밀번호</span>\n          <div>\n            <Input autoComplete=\"false\" type=\"password\" id=\"password\" value={password} onChange={onChangePassword} />\n          </div>\n        </Label>\n\n        <Label id=\"password-check-label\">\n          <span>비밀번호 확인</span>\n          <div>\n            <Input\n              autoComplete=\"false\"\n              type=\"password\"\n              id=\"password-check\"\n              value={passwordCheck}\n              onChange={onChangePasswordCheck}\n            />\n          </div>\n\n          {missmatchError && <Error>비밀번호가 일치하지 않습니다</Error>}\n          {!nickname && <Error>닉네임을 입력해주세요</Error>}\n          {signUpError && <Error>{signUpError}</Error>}\n          {signUpSuccess && <Success>환영합니다 ! 로그인 해주세요</Success>}\n        </Label>\n        <Button type=\"submit\">회원가입</Button>\n      </Form>\n      <LinkContainer>\n        이미 저희 식구인가요 ? 🐘\n        <Link to=\"/login\">로그인 하러가기</Link>\n      </LinkContainer>\n    </div>\n  );\n};\n\nexport default SignUp;\n"],"names":["useSWR","fetcher","data","error","mutate","useInput","email","onChangeEmail","nickname","onChangeNickname","password","setPassword","passwordCheck","setPasswordCheck","useState","missmatchError","setMissmatchError","signUpError","setSignupError","signUpSuccess","setSignupSuccess","Inputref","useRef","onChangePassword","useCallback","e","target","value","onChangePasswordCheck","onSubmit","length","preventDefault","current","focus","axios","then","response","catch","err","console","log","finally","undefined","navigate","useNavigate","useEffect","id","autoComplete","type","onChange","ref","to"],"sourceRoot":""}